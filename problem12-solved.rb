# PROBLEM
#The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#Let us list the factors of the first seven triangle numbers:
# 1: 1
# 3: 1,3
# 6: 1,2,3,6
#10: 1,2,5,10
#15: 1,3,5,15
#21: 1,3,7,21
#28: 1,2,4,7,14,28
#We can see that 28 is the first triangle number to have over five divisors.
#What is the value of the first triangle number to have over five hundred divisors?

# START TIMER
start = Time.new

# REQUIRE
require "prime"

# FUNCTIONS
def factors_of(number)
	primes, powers = number.prime_division.transpose
	exponents = powers.map{|i| (0..i).to_a}
	divisors = exponents.shift.product(*exponents).map do |pows|
		primes.zip(pows).map{|prime, power| prime ** power}.inject(:*)
	end
	divisors.sort.map{|div| [div, number / div]}
end

# CODE
for x in 2..100000
	tri = x*(x+1)/2
	divs = factors_of(tri).count
	puts "Tri #{x}: #{tri} - #{divs} factors"
	if divs > 500
		puts "Tri #{x}: #{tri} - #{divs} factors - #{factors_of(tri)}"
		break
	end
end

# STOP TIMER
puts "time: #{Time.now.to_f - start.to_f}"