#Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:
#Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
#Square	 	P4,n=n2	 	1, 4, 9, 16, 25, ...
#Pentagonal	 	P5,n=n(3n-1)/2	 	1, 5, 12, 22, 35, ...
#Hexagonal	 	P6,n=n(2n-1)	 	1, 6, 15, 28, 45, ...
#Heptagonal	 	P7,n=n(5n-3)/2	 	1, 7, 18, 34, 55, ...
#Octagonal	 	P8,n=n(3n-2)	 	1, 8, 21, 40, 65, ...
#The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.
#The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
#Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
#This is the only set of 4-digit numbers with this property.
#Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.

class Integer
	def triangle() self * (self + 1) / 2 end
	def square() self ** 2 end
	def penta() self * (3 * self - 1) / 2 end
	def hexa() self * (2 * self - 1) end
	def hepta() self * (5 * self - 3) / 2 end
	def octa() self * (3 * self - 2) end
	def cyclic(num) self.to_s[-2,2] == num.to_s[0,2] end
end

P3 = [], P4 = [], P5 = [], P6 = [], P7 = [], P8 = []
for i in 1..1E3
	P3 << i.triangle if i.triangle.between?(1000, 9999)
	P4 << i.square if i.square.between?(1000, 9999)
	P5 << i.penta if i.penta.between?(1000, 9999)
	P6 << i.hexa if i.hexa.between?(1000, 9999)
	P7 << i.hepta if i.hepta.between?(1000, 9999)
	P8 << i.octa if i.octa.between?(1000, 9999)
end

for cycle in 1..3
	P3.each do |p1|
		if 
	end
end